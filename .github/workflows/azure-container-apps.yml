name: CI-CD Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ACR_NAME: portfolioacr${{ secrets.ACR_UNIQUE_SUFFIX }}
  RESOURCE_GROUP: portfolio-rg
  LOCATION: eastus
  CA_ENV_NAME: portfolio-env
  API_APP_NAME: portfolio-api
  FRONTEND_APP_NAME: portfolio-frontend
  API_IMAGE_REPO: personal-portfolio-api
  FRONTEND_IMAGE_REPO: personal-portfolio-frontend

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      apiImage: ${{ steps.meta.outputs.apiImage }}
      frontendImage: ${{ steps.meta.outputs.frontendImage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Environment Variables (host)
        run: |
          echo "=== Host Environment Variable Summary ==="
          for VAR in ACR_NAME RESOURCE_GROUP LOCATION CA_ENV_NAME API_APP_NAME FRONTEND_APP_NAME API_IMAGE_REPO FRONTEND_IMAGE_REPO GITHUB_SHA; do
            VAL=$(eval echo "${!VAR}")
            if [ -z "$VAL" ]; then echo "$VAR=<EMPTY>"; else echo "$VAR=$VAL"; fi
          done
          echo "Secrets presence (not values):"
          echo "AZURE_CLIENT_ID set? $([ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && echo yes || echo NO)"
          echo "AZURE_TENANT_ID set? $([ -n "${{ secrets.AZURE_TENANT_ID }}" ] && echo yes || echo NO)"
          echo "AZURE_SUBSCRIPTION_ID set? $([ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] && echo yes || echo NO)"
          echo "ACR_UNIQUE_SUFFIX set? $([ -n "${{ secrets.ACR_UNIQUE_SUFFIX }}" ] && echo yes || echo NO)"
          echo "========================================"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Resource Group
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az group create -n $RESOURCE_GROUP -l $LOCATION

      - name: Ensure ACR
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "(azure/cli container) ACR_NAME=$ACR_NAME RESOURCE_GROUP=$RESOURCE_GROUP LOCATION=$LOCATION"
            if ! az acr show -n $ACR_NAME >/dev/null 2>&1; then
              echo "Creating ACR $ACR_NAME"
              az acr create -n $ACR_NAME -g $RESOURCE_GROUP --sku Basic --admin-enabled false
            fi
            az acr show -n $ACR_NAME --query loginServer -o tsv

      # Install Azure CLI on host runner so subsequent steps (outside azure/cli container) can use 'az'
      - name: Install Azure CLI (host)
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: ACR Docker Login (token)
        run: |
          LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          TOKEN=$(az acr login -n $ACR_NAME --expose-token --query accessToken -o tsv)
          echo "$TOKEN" | docker login $LOGIN_SERVER --username 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Define image tags
        id: meta
        run: |
          set -e
          echo "Verifying env before computing image tags:"
          echo "ACR_NAME=$ACR_NAME"
          echo "API_IMAGE_REPO=$API_IMAGE_REPO"; echo "FRONTEND_IMAGE_REPO=$FRONTEND_IMAGE_REPO"; echo "GITHUB_SHA=${GITHUB_SHA}";
          LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv || true)
          if [ -z "$LOGIN_SERVER" ]; then
            echo "ERROR: ACR login server could not be retrieved for '$ACR_NAME'." >&2
            exit 1
          fi
          API_IMAGE="$LOGIN_SERVER/$API_IMAGE_REPO:${GITHUB_SHA}"
          FRONTEND_IMAGE="$LOGIN_SERVER/$FRONTEND_IMAGE_REPO:${GITHUB_SHA}"
          if [ -z "$API_IMAGE" ] || [ -z "$FRONTEND_IMAGE" ]; then
            echo "ERROR: Computed image tags are empty." >&2
            exit 1
          fi
          echo "apiImage=$API_IMAGE" >> "$GITHUB_OUTPUT"
          echo "frontendImage=$FRONTEND_IMAGE" >> "$GITHUB_OUTPUT"
          echo API_IMAGE=$API_IMAGE >> "$GITHUB_ENV"
          echo FRONTEND_IMAGE=$FRONTEND_IMAGE >> "$GITHUB_ENV"

      - name: Debug image outputs
        run: |
          echo "Step output apiImage='${{ steps.meta.outputs.apiImage }}'"
          echo "Step output frontendImage='${{ steps.meta.outputs.frontendImage }}'"
          if [ -z "${{ steps.meta.outputs.apiImage }}" ] || [ -z "${{ steps.meta.outputs.frontendImage }}" ]; then
            echo "ERROR: Meta step outputs are empty after definition." >&2
            exit 1
          fi

      - name: Verify exported image env vars
        run: |
          echo "API_IMAGE env: $API_IMAGE"
          echo "FRONTEND_IMAGE env: $FRONTEND_IMAGE"
          if [ -z "$API_IMAGE" ] || [ -z "$FRONTEND_IMAGE" ]; then
            echo "ERROR: API_IMAGE or FRONTEND_IMAGE env variable is empty after meta step." >&2
            exit 1
          fi

      - name: Build API Image
        run: |
          docker build -t $API_IMAGE -f Server/Dockerfile --target final-no-frontend .

      - name: Build Frontend Image
        run: |
          docker build -t $FRONTEND_IMAGE frontend

      - name: Run .NET Tests
        run: dotnet test --no-build --verbosity minimal

      - name: Push Images
        run: |
          docker push $API_IMAGE
          docker push $FRONTEND_IMAGE

  provision-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Environment Variables (provision job host)
        run: |
          echo "=== Provision Job Host Env Summary ==="
          for VAR in ACR_NAME RESOURCE_GROUP LOCATION CA_ENV_NAME API_APP_NAME FRONTEND_APP_NAME API_IMAGE_REPO FRONTEND_IMAGE_REPO GITHUB_SHA; do
            VAL=$(eval echo "${!VAR}")
            if [ -z "$VAL" ]; then echo "$VAR=<EMPTY>"; else echo "$VAR=$VAL"; fi
          done
          echo "Upstream outputs (raw): apiImage='${{ needs.build-and-push.outputs.apiImage }}' frontendImage='${{ needs.build-and-push.outputs.frontendImage }}'"
          echo "Secrets presence (not values):"
          echo "AZURE_CLIENT_ID set? $([ -n "${{ secrets.AZURE_CLIENT_ID }}" ] && echo yes || echo NO)"
          echo "AZURE_TENANT_ID set? $([ -n "${{ secrets.AZURE_TENANT_ID }}" ] && echo yes || echo NO)"
          echo "AZURE_SUBSCRIPTION_ID set? $([ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ] && echo yes || echo NO)"
          echo "ACR_UNIQUE_SUFFIX set? $([ -n "${{ secrets.ACR_UNIQUE_SUFFIX }}" ] && echo yes || echo NO)"
          echo "======================================="

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: RBAC Precheck
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "Validating RBAC for roleAssignments/write at RG scope..."
            SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query id -o tsv)
            # List roles at RG scope
            ASSIGNED_ROLES=$(az role assignment list --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP --query "[?principalId=='$SP_OBJECT_ID'].roleDefinitionName" -o tsv)
            echo "Roles found: $ASSIGNED_ROLES"
            REQUIRED="User Access Administrator"
            if echo "$ASSIGNED_ROLES" | grep -q "Owner"; then
              echo "Owner role present - sufficient for role assignments."
            elif echo "$ASSIGNED_ROLES" | grep -q "$REQUIRED"; then
              echo "User Access Administrator role present - sufficient."
            else
              echo "ERROR: Service principal lacks Owner or User Access Administrator at RG scope."
              echo "Add role: az role assignment create --assignee-object-id $SP_OBJECT_ID --role 'User Access Administrator' --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP" >&2
              exit 1
            fi

      - name: What-If Infra (Bicep)
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "API_IMAGE (needs.build-and-push.outputs): '${{ needs.build-and-push.outputs.apiImage }}'"
            echo "FRONTEND_IMAGE (needs.build-and-push.outputs): '${{ needs.build-and-push.outputs.frontendImage }}'"
            if [ -z "${{ needs.build-and-push.outputs.apiImage }}" ] || [ -z "${{ needs.build-and-push.outputs.frontendImage }}" ]; then
              echo "One or both image outputs are empty. Failing early." >&2
              exit 1
            fi
            az deployment group what-if \
              -g $RESOURCE_GROUP \
              -f infra/main.bicep \
              -p location=$LOCATION \
                 acrName=$ACR_NAME \
                 envName=$CA_ENV_NAME \
                 apiAppName=$API_APP_NAME \
                 frontendAppName=$FRONTEND_APP_NAME \
                 apiImage='${{ needs.build-and-push.outputs.apiImage }}' \
                 frontendImage='${{ needs.build-and-push.outputs.frontendImage }}'

      - name: Deploy Infra (Bicep)
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az deployment group create \
              -g $RESOURCE_GROUP \
              -f infra/main.bicep \
              -p location=$LOCATION \
                 acrName=$ACR_NAME \
                 envName=$CA_ENV_NAME \
                 apiAppName=$API_APP_NAME \
                 frontendAppName=$FRONTEND_APP_NAME \
                 apiImage='${{ needs.build-and-push.outputs.apiImage }}' \
                 frontendImage='${{ needs.build-and-push.outputs.frontendImage }}'

      - name: Show URLs
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo API URL: https://$(az containerapp show -n $API_APP_NAME -g $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
            echo FRONTEND URL: https://$(az containerapp show -n $FRONTEND_APP_NAME -g $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
