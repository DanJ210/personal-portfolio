name: build-and-deploy-api

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  RESOURCE_GROUP: portfolio-rg
  LOCATION: eastus
  ACR_NAME: portfolioacr${{ secrets.ACR_UNIQUE_SUFFIX }}
  CONTAINER_ENV_NAME: portfolio-env
  API_APP_NAME: portfolio-api
  API_IMAGE_REPO: personal-portfolio-api
  API_PORT: 8080

jobs:
  api-build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Resource Group
        run: |
          az group create -n $RESOURCE_GROUP -l $LOCATION

      - name: Ensure Container Apps Environment
        run: |
          if ! az containerapp env show -n $CONTAINER_ENV_NAME -g $RESOURCE_GROUP >/dev/null 2>&1; then
            az containerapp env create -n $CONTAINER_ENV_NAME -g $RESOURCE_GROUP -l $LOCATION
          fi

      - name: Ensure ACR
        run: |
          if ! az acr show -n $ACR_NAME >/dev/null 2>&1; then
            az acr create -n $ACR_NAME -g $RESOURCE_GROUP --sku Basic --admin-enabled false
          fi
          az acr login -n $ACR_NAME
          LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          echo "LOGIN_SERVER=$LOGIN_SERVER" >> $GITHUB_ENV

      - name: Build API Image
        run: |
          docker build -t $LOGIN_SERVER/$API_IMAGE_REPO:${GITHUB_SHA} -f Server/Dockerfile --target final-no-frontend .

      - name: Push API Image
        run: |
          docker push $LOGIN_SERVER/$API_IMAGE_REPO:${GITHUB_SHA}

      - name: Deploy / Update API Container App
        run: |
          IMAGE_REF="$LOGIN_SERVER/$API_IMAGE_REPO:${GITHUB_SHA}"
          echo "Deploying image $IMAGE_REF to Container App $API_APP_NAME"
          if az containerapp show -n $API_APP_NAME -g $RESOURCE_GROUP >/dev/null 2>&1; then
            az containerapp update \
              -n $API_APP_NAME \
              -g $RESOURCE_GROUP \
              --image $IMAGE_REF \
              --revision-suffix "rev-${GITHUB_SHA:0:7}" \
              --set-env-vars ASPNETCORE_ENVIRONMENT=Production \
              --resources-cpu 0.5 --resources-memory 1Gi
          else
            az containerapp create \
              -n $API_APP_NAME \
              -g $RESOURCE_GROUP \
              -l $LOCATION \
              --environment $CONTAINER_ENV_NAME \
              --image $IMAGE_REF \
              --ingress external --target-port $API_PORT \
              --revision-suffix "rev-${GITHUB_SHA:0:7}" \
              --set-env-vars ASPNETCORE_ENVIRONMENT=Production \
              --resources-cpu 0.5 --resources-memory 1Gi
          fi
          API_FQDN=$(az containerapp show -n $API_APP_NAME -g $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
          echo "API_FQDN=$API_FQDN" >> $GITHUB_ENV
          echo "Deployed API FQDN: https://$API_FQDN"

      - name: Summary
        run: |
          echo "API deployed at: https://$API_FQDN"
