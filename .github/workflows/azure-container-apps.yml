name: CI-CD Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ACR_NAME: portfolioacr${{ secrets.ACR_UNIQUE_SUFFIX }}
  RESOURCE_GROUP: portfolio-rg
  LOCATION: eastus
  CA_ENV_NAME: portfolio-env
  API_APP_NAME: portfolio-api
  FRONTEND_APP_NAME: portfolio-frontend
  API_IMAGE_REPO: personal-portfolio-api
  FRONTEND_IMAGE_REPO: personal-portfolio-frontend

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      apiImage: ${{ steps.meta.outputs.apiImage }}
      frontendImage: ${{ steps.meta.outputs.frontendImage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Resource Group
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az group create -n $RESOURCE_GROUP -l $LOCATION

      - name: Ensure ACR
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            if ! az acr show -n $ACR_NAME >/dev/null 2>&1; then
              echo "Creating ACR $ACR_NAME"
              az acr create -n $ACR_NAME -g $RESOURCE_GROUP --sku Basic --admin-enabled false
            fi
            az acr show -n $ACR_NAME --query loginServer -o tsv

      # Install Azure CLI on host runner so subsequent steps (outside azure/cli container) can use 'az'
      - name: Install Azure CLI (host)
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: ACR Docker Login (token)
        run: |
          LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          TOKEN=$(az acr login -n $ACR_NAME --expose-token --query accessToken -o tsv)
          echo "$TOKEN" | docker login $LOGIN_SERVER --username 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Define image tags
        id: meta
        run: |
          LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          API_IMAGE="$LOGIN_SERVER/$API_IMAGE_REPO:${GITHUB_SHA}"
          FRONTEND_IMAGE="$LOGIN_SERVER/$FRONTEND_IMAGE_REPO:${GITHUB_SHA}"
          echo "apiImage=$API_IMAGE" >> $GITHUB_OUTPUT
          echo "frontendImage=$FRONTEND_IMAGE" >> $GITHUB_OUTPUT
          echo API_IMAGE=$API_IMAGE >> $GITHUB_ENV
          echo FRONTEND_IMAGE=$FRONTEND_IMAGE >> $GITHUB_ENV

      - name: Build API Image
        run: |
          docker build -t $API_IMAGE -f Server/Dockerfile --target final-no-frontend .

      - name: Build Frontend Image
        run: |
          docker build -t $FRONTEND_IMAGE frontend

      - name: Run .NET Tests
        run: dotnet test --no-build --verbosity minimal

      - name: Push Images
        run: |
          docker push $API_IMAGE
          docker push $FRONTEND_IMAGE

  provision-deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: What-If Infra (Bicep)
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "API_IMAGE (needs.build-and-push.outputs): '${{ needs.build-and-push.outputs.apiImage }}'"
            echo "FRONTEND_IMAGE (needs.build-and-push.outputs): '${{ needs.build-and-push.outputs.frontendImage }}'"
            if [ -z "${{ needs.build-and-push.outputs.apiImage }}" ] || [ -z "${{ needs.build-and-push.outputs.frontendImage }}" ]; then
              echo "One or both image outputs are empty. Failing early." >&2
              exit 1
            fi
            az deployment group what-if \
              -g $RESOURCE_GROUP \
              -f infra/main.bicep \
              -p location=$LOCATION \
                 acrName=$ACR_NAME \
                 envName=$CA_ENV_NAME \
                 apiAppName=$API_APP_NAME \
                 frontendAppName=$FRONTEND_APP_NAME \
                 apiImage='${{ needs.build-and-push.outputs.apiImage }}' \
                 frontendImage='${{ needs.build-and-push.outputs.frontendImage }}'

      - name: Deploy Infra (Bicep)
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az deployment group create \
              -g $RESOURCE_GROUP \
              -f infra/main.bicep \
              -p location=$LOCATION \
                 acrName=$ACR_NAME \
                 envName=$CA_ENV_NAME \
                 apiAppName=$API_APP_NAME \
                 frontendAppName=$FRONTEND_APP_NAME \
                 apiImage='${{ needs.build-and-push.outputs.apiImage }}' \
                 frontendImage='${{ needs.build-and-push.outputs.frontendImage }}'

      - name: Show URLs
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo API URL: https://$(az containerapp show -n $API_APP_NAME -g $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
            echo FRONTEND URL: https://$(az containerapp show -n $FRONTEND_APP_NAME -g $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
